@startuml

class Account {
  -accountNumber: String
  -balance: double
  -creationDate: Date
  -status: STATUS
  +getAccountNumber(): String
  +getBalance(): double
  +getCreationDate(): Date
  +getStatus(): STATUS
}

class CurrentAccount {
  -overdraft: double
  +getOverdraft(): double
}

class SavingsAccount {
  -interestRate: double
  +getInterestRate(): double
}

class Person {
  -nom: String
  -prenom: String
  -dateNaissance: Date
  -telephone: String
  -adresse: String
  +getNom(): String
  +getPrenom(): String
  +getDateNaissance(): Date
  +getTelephone(): String
  +getAdresse(): String
}

class Client extends Person {
  -code: int
  +getCode(): int
}

class Employee extends Person {
  -matricule: int
  -dateRecrutement: Date
  -email: String
  +getMatricule(): int
  +getDateRecrutement(): Date
  +getEmail(): String
}

class Mission {
  -code: int
  -nom: String
  -description: String
  +getCode(): int
  +getNom(): String
  +getDescription(): String
}

class MissionAssignment {
  -debutDate: Date
  -endDate: Date
  +getDebutDate(): Date
  +getEndDate(): Date
}

class Operation {
  -operationNumber: int
  -creationDate: Date
  -amount: double
  -type: OPERATIONTYPE
  +getOperationNumber(): int
  +getCreationDate(): Date
  +getAmount(): double
  +getType(): OPERATIONTYPE
}

interface AccountDAO {
  +delete(accountNumber: String): boolean
  +getByAccountNumber(accountNumber: String): Account
  +getAll(): List<Account>
}

interface CurrentAccountDAO {
  +create(currentAccount: CurrentAccount): CurrentAccount
  +update(currentAccount: CurrentAccount): CurrentAccount
}

interface SavingsAccountDAO {
  +create(savingsAccount: SavingsAccount): SavingsAccount
  +update(savingsAccount: SavingsAccount): SavingsAccount
}

interface PersonDAO {
  +create(person: Person): Person
  +update(person: Person): Person
  +delete(id: String): boolean
  +getById(id: String): Person
  +getAll(): List<Person>
}

interface ClientDAO {
  +create(client: Client): Client
  +update(client: Client): Client
  +delete(code: String): boolean
  +getByCode(code: String): Client
  +getAll(): List<Client>
}

interface EmployeeDAO {
  +create(employee: Employee): Employee
  +update(employee: Employee): Employee
  +delete(matricule: String): boolean
  +getByMatricule(matricule: String): Employee
  +getAll(): List<Employee>
}

interface MissionDAO {
  +create(mission: Mission): Mission
  +update(mission: Mission): Mission
  +delete(code: String): boolean
  +getByCode(code: String): Mission
  +getAll(): List<Mission>
}

interface MissionAssignmentDAO {
  +create(assignment: MissionAssignment): MissionAssignment
  +update(assignment: MissionAssignment): MissionAssignment
  +delete(id: String): boolean
  +getById(id: String): MissionAssignment
  +getAll(): List<MissionAssignment>
}

interface OperationDAO {
  +create(operation: Operation): Operation
  +update(operation: Operation): Operation
  +delete(operationNumber: String): boolean
  +getByOperationNumber(operationNumber: String): Operation
  +getAll(): List<Operation>
}

class AccountDAOImpl {
  +delete(accountNumber: String): boolean
  +getByAccountNumber(accountNumber: String): Account
  +getAll(): List<Account>
}

class CurrentAccountDAOImpl {
  +create(currentAccount: CurrentAccount): CurrentAccount
  +update(currentAccount: CurrentAccount): CurrentAccount
}

class SavingsAccountDAOImpl {
  +create(savingsAccount: SavingsAccount): SavingsAccount
  +update(savingsAccount: SavingsAccount): SavingsAccount
}

class PersonDAOImpl {
  +create(person: Person): Person
  +update(person: Person): Person
}

class ClientDAOImpl {
  +create(client: Client): Client
  +update(client: Client): Client
  +delete(code: String): boolean
  +getByCode(code: String): Client
  +getAll(): List<Client>
}

class EmployeeDAOImpl {
  +create(employee: Employee): Employee
  +update(employee: Employee): Employee
  +delete(matricule: String): boolean
  +getByMatricule(matricule: String): Employee
  +getAll(): List<Employee>
}

class MissionDAOImpl {
  +create(mission: Mission): Mission
  +update(mission: Mission): Mission
  +delete(code: String): boolean
  +getByCode(code: String): Mission
  +getAll(): List<Mission>
}

class MissionAssignmentDAOImpl {
  +create(assignment: MissionAssignment): MissionAssignment
  +update(assignment: MissionAssignment): MissionAssignment
  +delete(id: String): boolean
  +getById(id: String): MissionAssignment
  +getAll(): List<MissionAssignment>
}

class OperationDAOImpl {
  +create(operation: Operation): Operation
  +update(operation: Operation): Operation
  +delete(operationNumber: String): boolean
  +getByOperationNumber(operationNumber: String): Operation
  +getAll(): List<Operation>
}

class AccountService {
  -accountDAO: AccountDAO
  +createAccount(account: Account): Account
  +updateAccount(account: Account): Account
  +deleteAccount(accountNumber: String): boolean
  +getAccountByAccountNumber(accountNumber: String): Account
  +getAllAccounts(): List<Account>
}

class CurrentAccountService {
  -currentAccountDAO: CurrentAccountDAO
  +createCurrentAccount(currentAccount: CurrentAccount): CurrentAccount
  +updateCurrentAccount(currentAccount: CurrentAccount): CurrentAccount
  +deleteCurrentAccount(accountNumber: String): boolean
  +getCurrentAccountByAccountNumber(accountNumber: String): CurrentAccount
  +getAllCurrentAccounts(): List<CurrentAccount>
}

class SavingsAccountService {
  -savingsAccountDAO: SavingsAccountDAO
  +createSavingsAccount(savingsAccount: SavingsAccount): SavingsAccount
  +updateSavingsAccount(savingsAccount: SavingsAccount): SavingsAccount
  +deleteSavingsAccount(accountNumber: String): boolean
  +getSavingsAccountByAccountNumber(accountNumber: String): SavingsAccount
  +getAllSavingsAccounts(): List<SavingsAccount>
}

class PersonService {
  -personDAO: PersonDAO
  +createPerson(person: Person): Person
  +updatePerson(person: Person): Person
  +deletePerson(id: String): boolean
  +getPersonById(id: String): Person
  +getAllPersons(): List<Person>
}

class ClientService {
  -clientDAO: ClientDAO
  +createClient(client: Client): Client
  +updateClient(client: Client): Client
  +deleteClient(code: String): boolean
  +getClientByCode(code: String): Client
  +getAllClients(): List<Client>
}

class EmployeeService {
  -employeeDAO: EmployeeDAO
  +createEmployee(employee: Employee): Employee
  +updateEmployee(employee: Employee): Employee
  +deleteEmployee(matricule: String): boolean
  +getEmployeeByMatricule(matricule: String): Employee
  +getAllEmployees(): List<Employee>
}

class MissionService {
  -missionDAO: MissionDAO
  +createMission(mission: Mission): Mission
  +updateMission(mission: Mission): Mission
  +deleteMission(code: String): boolean
  +getMissionByCode(code: String): Mission
  +getAllMissions(): List<Mission>
}

class MissionAssignmentService {
  -missionAssignmentDAO: MissionAssignmentDAO
  +createMissionAssignment(assignment: MissionAssignment): MissionAssignment
  +updateMissionAssignment(assignment: MissionAssignment): MissionAssignment
  +deleteMissionAssignment(id: String): boolean
  +getMissionAssignmentById(id: String): MissionAssignment
  +getAllMissionAssignments(): List<MissionAssignment>
}

class OperationService {
  -operationDAO: OperationDAO
  +createOperation(operation: Operation): Operation
  +updateOperation(operation: Operation): Operation
  +deleteOperation(operationNumber: String): boolean
  +getOperationByOperationNumber(operationNumber: String): Operation
  +getAllOperations(): List<Operation>
}


class AccountUseCase {
  -accountService: AccountService
  +createAccount(account: Account): Account
  +updateAccount(account: Account): Account
  +deleteAccount(accountNumber: String): boolean
  +getAccountByAccountNumber(accountNumber: String): Account
  +getAllAccounts(): List<Account>
}

class CurrentAccountUseCase {
  -currentAccountService: CurrentAccountService
  +createCurrentAccount(currentAccount: CurrentAccount): CurrentAccount
  +updateCurrentAccount(currentAccount: CurrentAccount): CurrentAccount
  +deleteCurrentAccount(accountNumber: String): boolean
  +getCurrentAccountByAccountNumber(accountNumber: String): CurrentAccount
  +getAllCurrentAccounts(): List<CurrentAccount>
}

class SavingsAccountUseCase {
  -savingsAccountService: SavingsAccountService
  +createSavingsAccount(savingsAccount: SavingsAccount): SavingsAccount
  +updateSavingsAccount(savingsAccount: SavingsAccount): SavingsAccount
  +deleteSavingsAccount(accountNumber: String): boolean
  +getSavingsAccountByAccountNumber(accountNumber: String): SavingsAccount
  +getAllSavingsAccounts(): List<SavingsAccount>
}

class ClientUseCase {
  -clientService: ClientService
  +createClient(client: Client): boolean
  +updateClient(client: Client): boolean
  +deleteClient(code: String): boolean
  +getClientByCode(code: String): Client
  +getAllClients(): List<Client>
}

class EmployeeUseCase {
  -employeeService: EmployeeService
  +createEmployee(employee: Employee): boolean
  +updateEmployee(employee: Employee): boolean
  +deleteEmployee(matricule: String): boolean
  +getEmployeeByMatricule(matricule: String): Employee
  +getAllEmployees(): List<Employee>
}

class MissionUseCase {
  -missionService: MissionService
  +createMission(mission: Mission): boolean
  +updateMission(mission: Mission): boolean
  +deleteMission(code: String): boolean
  +getMissionByCode(code: String): Mission
  +getAllMissions(): List<Mission>
}

class OperationUseCase {
  -operationService: OperationService
  +createOperation(operation: Operation): boolean
  +updateOperation(operation: Operation): boolean
  +deleteOperation(operationNumber: String): boolean
  +getOperationByOperationNumber(operationNumber: String): Operation
  +getAllOperations(): List<Operation>
}

Enum OPERATIONTYPE {
  PAYMENT
  WITHDRAWAL
}


Enum STATUS {
  ACTIVE
  INACTIVE
}

AccountUseCase --> AccountService : uses
CurrentAccountUseCase --> CurrentAccountService : uses
SavingsAccountUseCase --> SavingsAccountService : uses
ClientUseCase --> ClientService : uses
EmployeeUseCase --> EmployeeService : uses
MissionUseCase --> MissionService : uses
OperationUseCase --> OperationService : uses
AccountService --> AccountDAOImpl : uses
CurrentAccountService --> CurrentAccountDAOImpl : uses
SavingsAccountService --> SavingsAccountDAOImpl : uses
ClientService --> ClientDAOImpl : uses
EmployeeService --> EmployeeDAOImpl : uses
MissionService --> MissionDAOImpl : uses
OperationService --> OperationDAOImpl : uses
AccountDAO --|> AccountDAOImpl
CurrentAccountDAO --|> CurrentAccountDAOImpl
SavingsAccountDAO --|> SavingsAccountDAOImpl
ClientDAO --|> ClientDAOImpl
EmployeeDAO --|> EmployeeDAOImpl
MissionDAO --|> MissionDAOImpl
OperationDAO --|> OperationDAOImpl
Account <|-- CurrentAccount : extends
Account <|-- SavingsAccount : extends
Account "1" *-- "0..*" Operation
Account "1" *-- "0..*" Client
Account "1" *-- "0..*" Employee
Employee "1" *-- "0..*" Operation
Mission "1" *-- "0..*" Employee
MissionAssignment -- Mission : assigned to
MissionAssignment -- Employee : assigned employee
MissionAssignment ..> Person : extends

@enduml